(function() {
    const rxjs = require('rxjs');
    const _ = require('lodash');
    const boardsManager = require('./boardsManager');

    class CommunicationController {

        constructor() {

            // We will have socket.io connection with clients on a root namespace to advertise new boards
            // and we will open namespaced sockets for each board for communication of the board activity
            this.server = require("./server.js");
            this.server.io.on('connection', (socket) => {

                // Advertise each of the boards that has already been connected
                const currentPorts = boardsManager.getBoardNames();
                const isPortAnnounced = {};
                currentPorts.forEach(portName => {
                    socket.emit("board", portName);
                    isPortAnnounced[portName] = true;                    
                })

                // Advertise each boards that will be connected in the future
                boardsManager.boardSubject.subscribe(board => { 
                    if (board && board.portName && !isPortAnnounced[board.portName]) {
                        socket.emit("board", board.portName);
                    }   
                });
            })

            // Create namespaced sockets when new boards are connected
            boardsManager.boardSubject.subscribe(board => {
                if (board) {
                    var nsp = this.server.io.of(`${board.portName}`);
                    
                    nsp.on('connection', function(socket){
                        console.log("PORT CONNECTED ON THE SERVER: ", board.portName)
                        
                        socket.on('pinMode', function(d){
                            board.setPinMode(d.pin, d.mode)
                        });

                        socket.on('pinValue', function(d){
                            board.digitalWrite(d.pin, d.value)
                        });

                    });

                    board.analogRead.subscribe(d => {
                        nsp.emit('analogRead', d);
                    })

                    board._digitalRead.subscribe(d => {
                        nsp.emit('digitalRead', d);
                    })

                    board._pinMode.subscribe(d => {
                        nsp.emit('pinMode', d);
                    })

                    board.state.subscribe(d => {
                        if (d==='connected') {
                            nsp.emit('pins', board.pins);
                        }

                        nsp.emit('state', d);
                    })
    
                    this.boardSubject.next(board)
                }

            });

            this.boardSubject = new rxjs.Subject();
            this.boardObservable = this.boardSubject.asObservable();

            this.updateSubject = new rxjs.Subject();
            this.update = this.updateSubject.asObservable();

            this.boardsSubject = new rxjs.BehaviorSubject([]);
            this.boardsObservable = this.boardsSubject.asObservable();

            boardsManager.init();
            boardsManager.boardsSubject.subscribe(d => {
                this.boardsSubject.next(d)
            });



            boardsManager.updateSubject.subscribe(d => this.updateSubject.next(d));


        }

        init() {}

        getBoards() {
            return this.boards;
        }
    };



    const controller = new CommunicationController();

    module.exports = controller;
}());