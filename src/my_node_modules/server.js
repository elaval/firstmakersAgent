(function() {
// ================ Base Setup ========================
// Include Hapi package
var Hapi = require('hapi');
var _ = require('lodash');
const boardManager = require("./board.js");
const boardsManager = require("./boardsManager.js");
const config = require('./config.js');


// Create Server Object
var server = new Hapi.Server();

// Define PORT number
server.connection({port: config.SERVER_PORT});
var io = require('socket.io')(server.listener);

io.on('connection', function (socket) {
    
    socket.emit('Oh hii!');

    socket.on('burp', function () {
        socket.emit('Excuse you!');
    });

    socket.emit("event", 123)
});


// =============== Routes for our API =======================

// GET AVAILABLE BOARDS //
server.route({
    method: 'GET',      // Methods Type
    path: '/api/boards',  // Url
    handler: function (request, reply) { //Action
        const ports = boardsManager.getBoardNames();
   
        reply({
            statusCode: 200,
            message: 'Getting boards',
            data: ports
        });
    }
});

// GET DATA FOR ONE BOARD //
server.route({
    method: 'GET',      // Methods Type
    path: '/api/boards/{boardId}',  // Url
    handler: function (request, reply) { //Action

        const port = decodeURIComponent(request.params.boardId);
        const board = boardsManager.getBoard(port);
   
        reply({
            statusCode: 200,
            message: 'Getting boards',
            data: board.pins || []     
        });
    }
});

// GET DATA FOR PINS  //
server.route({
    method: 'GET',      // Methods Type
    path: '/api/boards/{boardId}/pins/',  // Url
    handler: function (request, reply) { //Action

        const port = decodeURIComponent(request.params.boardId);
        const board = boardsManager.getBoard(port);
   
        reply({
            statusCode: 200,
            message: 'Getting boards',
            data: board.pins || []     
        });
    }
});


// GET DATA FOR ONE PIN  //
server.route({
    method: 'GET',      // Methods Type
    path: '/api/boards/{boardId}/pins/{pinNumber}',  // Url
    handler: function (request, reply) { //Action

        const pinNumber = decodeURIComponent(request.params.pinNumber);
        const port = decodeURIComponent(request.params.boardId);
        const board = boardsManager.getBoard(port);

        reply({
            statusCode: 200,
            message: 'Getting boards',
            data: board.pins && board.pins[+pinNumber]     
        });
    }
});

// UPDATE VALUES FOR A SPECIFIC PIN
server.route({
    method: 'PATCH',      // Methods Type
    path: '/api/boards/{boardId}/pins/{pinNumber}',  // Url
    handler: function (request, reply) { //Action

        const pinNumber = decodeURIComponent(request.params.pinNumber);
        const port = decodeURIComponent(request.params.boardId);
        const board = boardsManager.getBoard(port);        

        if (board && board.pins) {
            const pin = board.pins[pinNumber];
            const payload = request.payload; // GET INPUT FROM REUEST BODY

            // Change mode if a mode attribute is provided in the payload
            if (_.isNumber(payload.mode)) {
                board.setPinMode(pinNumber, payload.mode);     
            }

            if (!isNaN(parseFloat(payload.value)) && isFinite(payload.value)) {
                board.digitalWrite(pinNumber,payload.value)
            }
            
            reply({
                statusCode: 200,
                message: 'Getting All User Data',
                data: board.pins[pinNumber]
            });
            
        } else {
            reply({
                statusCode: 500,
                message: 'No board'
            });
        }
    }
});


// UPDATE VALUES FOR A SPECIFIC PIN
server.route({
    method: 'PUT',      // Methods Type
    path: '/api/boards/{boardId}/pins/{pinNumber}',  // Url
    handler: function (request, reply) { //Action

        const pinNumber = decodeURIComponent(request.params.pinNumber);
        const port = decodeURIComponent(request.params.boardId);
        const board = boardsManager.getBoard(port);        
        const value = +request.payload;
        
        if (board && board.pins) {
            board.digitalWrite(pinNumber,value);
            const newValue = board.pins[pinNumber].value;
            
            reply({
                statusCode: 200,
                message: 'Pin value',
                data: newValue
            });
            
        } else {
            reply({
                statusCode: 500,
                message: 'No board'
            });
        }
    }
});

server.route({
    method: 'PUT',      // Methods Type
    path: '/api/pins/{id}',  // Url
    handler: function (request, reply) { //Action

        const pinNumber = request && request.params && +request.params.id;
        
        if (myboard && myboard.pins) {
            const value = +request.payload;
            myboard.digitalWrite(pinNumber,value)
            const newValue = myboard.pins[pinNumber].value;
            
            reply({
                statusCode: 200,
                message: 'Getting All User Data',
                data: newValue
            });
            
        } else {
            res.json("no board");
        }
    }
});


function isValidMode(mode, pin) {
    if (pin && pin.modes) {
        pin.modes.lookAt
    }
}


// =============== Start our Server =======================
// Lets start the server
server.start(function () {
    console.log('Server running at:', server.info.uri);
});


function startServer(boardManager) {
    boardManager.newConnection.subscribe((d) => {
        myboard = d.board;
        console.log("BOARD CONNECTED");
    });

}

module.exports = {
    startServer: startServer,
    io: io
}
}());